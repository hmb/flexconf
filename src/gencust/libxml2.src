***************************************************************************
flexconf - flexible configuration generator
Copyright (c) 2008-2009 Holger Böhnke

This file is part of flexconf.

Flexconf is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
***************************************************************************



********** [GL] PROLOG
/*-------------------------------------------------------------------
  This file is part of the structure de/serializer flexconf.
  It has been automatically created by:

  $(packagename)

  !!! DO NOT MODIFY MANUALLY !!!

  Bugreports to $(bugreport)
  -------------------------------------------------------------------
  flexconf - flexible configuration generator
  Copyright (c) 2008-2009 Holger Böhnke

  This file is part of flexconf.

  Flexconf is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -------------------------------------------------------------------
  As a special exception, you may create a larger work that contains
  part or all of the de/serializer functions and distribute that work
  under terms of your choice, as long as that work itself does not
  provide a functionality similar to flexconf.
  Alternatively, if you modify or redistribute this file itself,
  you may (at your option) remove this special exception, which will
  cause the file to be licensed under the GNU General Public
  License without this special exception.
*/

********** [END]






********** [CH] PROLOG
// ------------------------------------------------------------------
// This is the structure common header file.
// ------------------------------------------------------------------

#ifndef _$(basename)Com_h_
#define _$(basename)Com_h_

#include <string>
#include <list>
#include <set>
#include <map>

struct SLongHex
{
  SLongHex() { }
  SLongHex(unsigned long ulHex) : mulHex(ulHex) { }

  unsigned long mulHex;

  bool operator == (const SLongHex & cmp) const { return mulHex == cmp.mulHex; }
  bool operator >= (const SLongHex & cmp) const { return mulHex >= cmp.mulHex; }
  bool operator <= (const SLongHex & cmp) const { return mulHex <= cmp.mulHex; }
  bool operator >  (const SLongHex & cmp) const { return mulHex >  cmp.mulHex; }
  bool operator <  (const SLongHex & cmp) const { return mulHex <  cmp.mulHex; }
  bool operator != (const SLongHex & cmp) const { return mulHex != cmp.mulHex; }

  unsigned long operator = (unsigned long ulHex) { return mulHex=ulHex; }
  operator unsigned long () const { return mulHex; }
};

class CWriteXml;

struct _xmlNode;
typedef struct _xmlNode xmlNode;

********** [END]


********** [CH] FILE PROLOG
#include "$(headerfile)"
********** [END]


********** [CH] STRUCT PROLOG
********** [END]


********** [CH] GENERIC DECL
********** [END]


********** [CH] VECTOR DECL
********** [END]


********** [CH] SET/LIST DECL
********** [END]


********** [CH] MAP DECL
********** [END]


********** [CH] STRUCT EPILOG
********** [END]


********** [CH] FILE EPILOG
********** [END]


********** [CH] EPILOG
#endif // _$(basename)Com_h_
********** [END]






********** [CI] PROLOG
// ------------------------------------------------------------------
// This is the structure common implementation file.
// ------------------------------------------------------------------

#include "$(basename)Com.h"
********** [END]


********** [CI] FILE PROLOG
********** [END]


********** [CI] STRUCT PROLOG
********** [END]


********** [CI] GENERIC DECL
********** [END]


********** [CI] VECTOR DECL
********** [END]


********** [CI] SET/LIST DECL
********** [END]


********** [CI] MAP DECL
********** [END]


********** [CI] STRUCT EPILOG
********** [END]


********** [CI] FILE EPILOG
********** [END]


********** [CI] EPILOG
********** [END]






********** [SH] PROLOG
// ------------------------------------------------------------------
// This is the structure serializer header file.
// ------------------------------------------------------------------

#ifndef _$(basename)Ser_h_
#define _$(basename)Ser_h_

//#include <stdio.h>

#ifdef _MSC_VER
#define snprintf _snprintf
#pragma warning(disable: 4786)
#endif

********** [END]


********** [SH] FILE PROLOG
********** [END]


********** [SH] STRUCT PROLOG
void serialize(CWriteXml & rWriteXml, const $(name) & rObject, const char * pszTag = 0, bool fRoot = true,
  const char * pszIdTag = 0, const std::string * pstrIdValue = 0);
********** [END]


********** [SH] GENERIC DECL
********** [END]


********** [SH] VECTOR DECL
********** [END]


********** [SH] SET/LIST DECL
********** [END]


********** [SH] MAP DECL
********** [END]


********** [SH] STRUCT EPILOG
********** [END]


********** [SH] FILE EPILOG
********** [END]


********** [SH] EPILOG



const int IDENT_WIDTH = 2;

class CWriteXml
{
public:
  CWriteXml()
  {
  }

  virtual ~CWriteXml()
  {
  }

  void StartTag(const char * pszTag, bool fRoot)
  {
    startTag(pszTag, fRoot);
  }

  void EndTag(const char * pszTag)
  {
    endTag(pszTag);
  }

  void PutData(const char * pszData, int nDataLen = 0x7FFF)
  {
    putData(pszData, nDataLen);
  }

private:
  virtual void startTag(const char * pszTag, bool fRoot)            = 0;
  virtual void endTag(const char * pszTag)                          = 0;
  virtual void putData(const char * pszData, int nDataLen = 0x7FFF) = 0;
};



class CWriteXmlString : public CWriteXml
{
public:
  CWriteXmlString(std::string & strWrite) :
    mstrWrite(strWrite),
    mnDepth(0),
    mfStartTag(false),
    mfLf(false)
  {
  }

  void startTag(const char * pszTag, bool fRoot)
  {
    if (fRoot)
    {
      mstrWrite += "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n";
      mfLf      = true;
    }

    if (mfStartTag)
    {
      mstrWrite += '\n';
      mfLf = true;
    }

    indent();
    mstrWrite += '<';
    mstrWrite += pszTag;
    mstrWrite += '>';
    mfStartTag = true;
    mnDepth++;
  }

  void endTag(const char * pszTag)
  {
    mnDepth--;
    indent();
    mstrWrite += "</";
    mstrWrite += pszTag;
    mstrWrite += ">\n";
    mfLf      = true;
    mfStartTag  = false;
  }

  void putData(const char * pszData, int nDataLen)
  {
    const char *  pszPos  = pszData;

    while (*pszPos && pszPos-pszData < nDataLen)
    {
      if ('<' == *pszPos)
      {
        mstrWrite += "&lt;";
        pszPos++;
        continue;
      }

      if ('>' == *pszPos)
      {
        mstrWrite += "&gt;";
        pszPos++;
        continue;
      }

      if ('&' == *pszPos)
      {
        mstrWrite += "&amp;";
        pszPos++;
        continue;
      }

      if ('"' == *pszPos)
      {
        mstrWrite += "&quot;";
        pszPos++;
        continue;
      }

      if ('\'' == *pszPos)
      {
        mstrWrite += "&apos;";
        pszPos++;
        continue;
      }

      const char *  pszEnd  = pszPos;

      // find end or entity
      while ( pszEnd-pszData < nDataLen   &&
              0   != *pszEnd    &&
              '<' != *pszEnd    &&
              '>' != *pszEnd    &&
              '"' != *pszEnd    &&
              '\''!= *pszEnd    &&
              '&' != *pszEnd )
      {
        pszEnd++;
      }

      mstrWrite.append(pszPos, pszEnd-pszPos);
      pszPos = pszEnd;
    }

    mfStartTag  = false;
  }

  void indent()
  {
    if (mfLf)
    {
      mstrWrite.append(mnDepth*IDENT_WIDTH, ' ');
      mfLf = false;
    }
  }


private:
  std::string & mstrWrite;
  int           mnDepth;
  bool          mfStartTag;
  bool          mfLf;
};



inline void serialize(char * pBuffer, int nBufSize, const bool & rObject)
{
  snprintf(pBuffer, nBufSize, rObject? "1" : "0");
}

inline void serialize(char * pBuffer, int nBufSize, const short & rObject)
{
  snprintf(pBuffer, nBufSize, "%hd", rObject);
}

inline void serialize(char * pBuffer, int nBufSize, const unsigned short & rObject)
{
  snprintf(pBuffer, nBufSize, "%hu", rObject);
}

inline void serialize(char * pBuffer, int nBufSize, const int & rObject)
{
  snprintf(pBuffer, nBufSize, "%d", rObject);
}

inline void serialize(char * pBuffer, int nBufSize, const unsigned int & rObject)
{
  snprintf(pBuffer, nBufSize, "%u", rObject);
}

inline void serialize(char * pBuffer, int nBufSize, const long & rObject)
{
  snprintf(pBuffer, nBufSize, "%ld", rObject);
}

inline void serialize(char * pBuffer, int nBufSize, const unsigned long & rObject)
{
  snprintf(pBuffer, nBufSize, "%lu", rObject);
}

inline void serialize(char * pBuffer, int nBufSize, const float & rObject)
{
  snprintf(pBuffer, nBufSize, "%f", static_cast<double>(rObject));
}

inline void serialize(char * pBuffer, int nBufSize, const double & rObject)
{
  snprintf(pBuffer, nBufSize, "%f", rObject);
}

inline void serialize(char * pBuffer, int nBufSize, const SLongHex & rObject)
{
  snprintf(pBuffer, nBufSize, "%lX", rObject.mulHex);
}



// serialize a std::string object
void serialize(CWriteXml & rWriteXml, const std::string &     rObject, const char * pszTag, bool fRoot = true);

// serialize any of the objects for that an above function is defined
template <class _T>
void serialize(CWriteXml & rWriteXml, const _T & rObject, const char * pszTag, bool fRoot = true)
{
  rWriteXml.StartTag(pszTag, fRoot);
  char szBuffer[80];
  serialize(szBuffer, 80, rObject);
  rWriteXml.PutData(szBuffer);
  rWriteXml.EndTag(pszTag);
}



// serialize any set object for witch a key serialize function exists
template <class _K>
void serialize(
  CWriteXml & rWriteXml, const std::set<_K> & rObject,
  const char * pszTag, const char * pszTagItem, bool fRoot = true)
{
  rWriteXml.StartTag(pszTag, fRoot);
  for (typename std::set<_K>::const_iterator itr=rObject.begin(); itr!=rObject.end(); itr++)
  {
    // serialize the key object
    serialize(rWriteXml, *itr, pszTagItem, false);
  }
  rWriteXml.EndTag(pszTag);
}



// serialize any list object for witch a serialize function exists
template <class _T>
void serialize(
  CWriteXml & rWriteXml, const std::list<_T> & rObject,
  const char * pszTag, const char * pszTagItem, bool fRoot = true)
{
  rWriteXml.StartTag(pszTag, fRoot);
  for (typename std::list<_T>::const_iterator itr=rObject.begin(); itr!=rObject.end(); itr++)
  {
    // serialize the key object
    serialize(rWriteXml, *itr, pszTagItem, false);
  }
  rWriteXml.EndTag(pszTag);
}



// serialize a std::map<std::string, _T> object
template <class _T>
void serialize(
  CWriteXml & rWriteXml, const std::map<std::string, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId,
  bool fRoot = true)
{
  rWriteXml.StartTag(pszTag, fRoot);
  for (typename std::map<std::string, _T>::const_iterator itr=rObject.begin(); itr!=rObject.end(); itr++)
  {
    serialize(rWriteXml, itr->second, pszTagItem, false, pszTagId, &itr->first);
  }
  rWriteXml.EndTag(pszTag);
}



// serialize any other map object for witch a key serialize function exists
template <class _K, class _T>
void serialize(
  CWriteXml & rWriteXml, const std::map<_K, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId,
  bool fRoot = true)
{
  rWriteXml.StartTag(pszTag, fRoot);
  for (typename std::map<_K, _T>::const_iterator itr=rObject.begin(); itr!=rObject.end(); itr++)
  {
    // first serialize the key to a string
    const int BUFSIZE = 1024;
    char szBuffer[BUFSIZE];
    serialize(szBuffer, BUFSIZE, itr->first);
    std::string strBuffer(szBuffer);
    // serialize the object with a string key
    serialize(rWriteXml, itr->second, pszTagItem, false, pszTagId, &strBuffer);
  }
  rWriteXml.EndTag(pszTag);
}



// serialize a std::multimap<std::string, _T> object
template <class _T>
void serialize(
  CWriteXml & rWriteXml, const std::multimap<std::string, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId,
  bool fRoot = true)
{
  rWriteXml.StartTag(pszTag, fRoot);
  for (typename std::multimap<std::string, _T>::const_iterator itr=rObject.begin(); itr!=rObject.end(); itr++)
  {
    serialize(rWriteXml, itr->second, pszTagItem, false, pszTagId, &itr->first);
  }
  rWriteXml.EndTag(pszTag);
}



// serialize any other multimap object for witch a key serialize function exists
template <class _K, class _T>
void serialize(
  CWriteXml & rWriteXml, const std::multimap<_K, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId,
  bool fRoot = true)
{
  rWriteXml.StartTag(pszTag, fRoot);
  for (typename std::multimap<_K, _T>::const_iterator itr=rObject.begin(); itr!=rObject.end(); itr++)
  {
    // first serialize the key to a string
    const int BUFSIZE = 1024;
    char szBuffer[BUFSIZE];
    serialize(szBuffer, BUFSIZE, itr->first);
    std::string strBuffer(szBuffer);
    // serialize the object with a string key
    serialize(rWriteXml, itr->second, pszTagItem, false, pszTagId, &strBuffer);
  }
  rWriteXml.EndTag(pszTag);
}


#endif // _$(basename)Ser_h_
********** [END]






********** [SI] PROLOG
// ------------------------------------------------------------------
// This is the structure serializer implementation file.
// ------------------------------------------------------------------

#include "$(basename)Com.h"
#include "$(basename)Ser.h"
********** [END]


********** [SI] FILE PROLOG
********** [END]


********** [SI] STRUCT PROLOG



void serialize(CWriteXml & rWriteXml, const $(name) & rObject, const char * pszTag, bool fRoot,
  const char * pszIdTag, const std::string * pstrIdValue)
{
  if (!pszTag)
    pszTag="$(alias)";
  rWriteXml.StartTag(pszTag, fRoot);
  if (pszIdTag && pstrIdValue)
  {
    serialize(rWriteXml, *pstrIdValue, pszIdTag, false);
  }
********** [END]


********** [SI] GENERIC DECL
  serialize(rWriteXml, rObject.$(name), "$(alias)", false);
********** [END]


********** [SI] VECTOR DECL
/* TODO
  {for (int n=0; n<$(size); n++)
  {
    serialize(rWriteXml, rObject.$(name)[n], "$(alias)", false);
  }}
*/
********** [END]


********** [SI] SET/LIST DECL
  serialize(rWriteXml, rObject.$(name), "$(alias)", "$(item)", false);
********** [END]


********** [SI] MAP DECL
  serialize(rWriteXml, rObject.$(name), "$(alias)", "$(item)", "$(id)", false);
********** [END]


********** [SI] STRUCT EPILOG
  /* end of struct serialize function */
  rWriteXml.EndTag(pszTag);
}
********** [END]


********** [SI] FILE EPILOG
********** [END]


********** [SI] EPILOG



void serialize(CWriteXml & rWriteXml, const std::string & rObject, const char * pszTag, bool fRoot)
{
  rWriteXml.StartTag(pszTag, fRoot);
  rWriteXml.PutData(rObject.data(), rObject.length());
  rWriteXml.EndTag(pszTag);
}



********** [END]






********** [DH] PROLOG
// ------------------------------------------------------------------
// This is the structure deserializer header file.
// ------------------------------------------------------------------

#ifndef _$(basename)Des_h_
#define _$(basename)Des_h_

#include <libxml/parser.h>
#include <libxml/tree.h>
#include <iostream>

********** [END]


********** [DH] FILE PROLOG
********** [END]


********** [DH] STRUCT PROLOG
void deserialize(xmlNode * node, $(name) & rObject, const char * pszTag =0, bool fRoot = true,
  const char * pszIdTag = 0, std::string * pstrIdValue = 0);

********** [END]


********** [DH] GENERIC DECL
********** [END]


********** [DH] VECTOR DECL
********** [END]


********** [DH] SET/LIST DECL
********** [END]


********** [DH] MAP DECL
********** [END]


********** [DH] STRUCT EPILOG
********** [END]


********** [DH] FILE EPILOG
********** [END]


********** [DH] EPILOG



inline void deserialize(const char * pBuffer, bool & rObject)
{
  rObject =
    0==strncmp(pBuffer, "true", 4) ||
    0==strncmp(pBuffer, "yes", 3) ||
    0==strncmp(pBuffer, "on", 2) ||
    0==strncmp(pBuffer, "1", 1);
}

inline void deserialize(const char * pBuffer, short & rObject)
{
  rObject = strtol(pBuffer, 0, 10);
}

inline void deserialize(const char * pBuffer, unsigned short & rObject)
{
  rObject = strtoul(pBuffer, 0, 10);
}

inline void deserialize(const char * pBuffer, int & rObject)
{
  rObject = strtol(pBuffer, 0, 10);
}

inline void deserialize(const char * pBuffer, unsigned int & rObject)
{
  rObject = strtoul(pBuffer, 0, 10);
}

inline void deserialize(const char * pBuffer, long & rObject)
{
  rObject = strtol(pBuffer, 0, 10);
}

inline void deserialize(const char * pBuffer, unsigned long & rObject)
{
  rObject = strtoul(pBuffer, 0, 10);
}

inline void deserialize(const char * pBuffer, float & rObject)
{
  rObject = atof(pBuffer);
}

inline void deserialize(const char * pBuffer, double & rObject)
{
  rObject = atof(pBuffer);
}

inline void deserialize(const char * pBuffer, SLongHex & rObject)
{
  rObject.mulHex = strtoul(pBuffer, 0, 16);
}



void deserialize(xmlNode * node, std::string & rObject, const char * pszTag, bool fRoot = true);



inline xmlNode * skipWhitespace(xmlNode * node)
{
  if (!node ||  node->type != XML_TEXT_NODE)
  {
    return node;
  }

  for (xmlChar * p=node->content; p && *p; ++p)
  {
    if (*p != ' '
      && *p != '\t'
      && *p != '\r'
      && *p != '\n')
    {
      return node;
    }
  }

  return node->next;
}



inline bool isElement(xmlNode * &node, const char * name)
{
  bool retval =
    node &&
    node->type == XML_ELEMENT_NODE &&
    0==xmlStrcmp(node->name, reinterpret_cast<const unsigned char *>(name));

  if (retval)
  {
    std::cerr << "isElement: " << name << (retval? " == " : " != ") << node->name << std::endl;
    node = skipWhitespace(node->children);
  }

  return retval;
}



// deserialize types without a base or ordinal integers in decimal system
template <class _T>
void deserialize(xmlNode * node, _T & rObject, const char * pszTag, bool fRoot = true)
{
  std::cerr << "deserialize: " << node->name << " (" << pszTag << ")" << std::endl;

  if (fRoot)
  {
    if (!isElement(node, pszTag))
      return;
  }

  if (!node ||  node->type != XML_TEXT_NODE)
    return;

  deserialize(reinterpret_cast<char*>(node->content), rObject);

  // return node->next == 0;
}



template <class _K>
void deserialize(
  xmlNode * node, std::set<_K> & rObject,
  const char * pszTag, const char * pszTagItem, bool fRoot = true)
{
  if (fRoot)
  {
    if (!isElement(node, pszTag))
      return;
  }

  for (; node; node = skipWhitespace(node->next))
  {
    xmlNode * elem = node;
    if (isElement(elem, pszTagItem))
    {
      _K _k;
      deserialize(elem, _k, pszTagItem, false);
      rObject.insert(_k);
      continue;
    }
  } // for
}



template <class _T>
void deserialize(
  xmlNode * node, std::list<_T> & rObject,
  const char * pszTag, const char * pszTagItem, bool fRoot = true)
{
  if (fRoot)
  {
    if (!isElement(node, pszTag))
      return;
  }

  for (; node; node = skipWhitespace(node->next))
  {
    xmlNode * elem = node;
    if (isElement(elem, pszTagItem))
    {
      _T _t;
      deserialize(elem, _t, pszTagItem, false);
      rObject.push_back(_t);
      continue;
    }
  } // for
}



template <class _T>
void deserialize(
  xmlNode * node, std::map<std::string, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId,
  bool fRoot = true)
{
  if (fRoot)
  {
    if (!isElement(node, pszTag))
      return;
  }

  for (; node; node = skipWhitespace(node->next))
  {
    xmlNode * elem = node;
    if (isElement(elem, pszTagItem))
    {
      std::string strKey;
      _T _t;
      deserialize(elem, _t, pszTagItem, false, pszTagId, &strKey);
#if 0 // this should suffice, but to be on the safe side we use the old method
      rObject[strKey] = _t;
#else
      typename std::map<std::string, _T>::iterator fnd = rObject.find(strKey);
      if (fnd != rObject.end())
      {
        rObject.erase(fnd);
      }
      rObject.insert(std::pair<std::string, _T>(strKey, _t));
#endif
      continue;
    }
  } // for
}



template <class _K, class _T>
void deserialize(
  xmlNode * node, std::map<_K, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId,
  bool fRoot = true)
{
  if (fRoot)
  {
    if (!isElement(node, pszTag))
      return;
  }

  for (; node; node = skipWhitespace(node->next))
  {
    xmlNode * elem = node;
    if (isElement(elem, pszTagItem))
    {
      std::string strKey;
      _T _t;
      deserialize(elem, _t, pszTagItem, false, pszTagId, &strKey);
      _K _k;
      deserialize(strKey.c_str(), _k);
#if 0 // this should suffice, but to be on the safe side we use the old method
      rObject[_k] = _t;
#else
      typename std::map<_K, _T>::iterator fnd = rObject.find(_k);
      if (fnd != rObject.end())
      {
        rObject.erase(fnd);
      }
      rObject.insert(std::pair<_K, _T>(_k, _t));
#endif
      continue;
    }
  } // for
}



template <class _T>
void deserialize(
  xmlNode * node, std::multimap<std::string, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId,
  bool fRoot = true)
{
  if (fRoot)
  {
    if (!isElement(node, pszTag))
      return;
  }

  for (; node; node = skipWhitespace(node->next))
  {
    xmlNode * elem = node;
    if (isElement(elem, pszTagItem))
    {
      std::string strKey;
      _T _t;
      deserialize(elem, _t, pszTagItem, false, pszTagId, &strKey);
      rObject.insert(std::pair<std::string, _T>(strKey, _t));
      continue;
    }
  } // for
}



template <class _K, class _T>
void deserialize(
  xmlNode * node, std::multimap<_K, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId,
  bool fRoot = true)
{
  if (fRoot)
  {
    if (!isElement(node, pszTag))
      return;
  }

  for (; node; node = skipWhitespace(node->next))
  {
    xmlNode * elem = node;
    if (isElement(elem, pszTagItem))
    {
      std::string strKey;
      _T _t;
      deserialize(elem, _t, pszTagItem, false, pszTagId, &strKey);
      _K _k;
      deserialize(strKey.c_str(), _k);
      rObject.insert(std::pair<_K, _T>(_k, _t));
      continue;
    }
  } // for
}



template <class T>
bool LoadLibxml2(const char * filename, const char * roottag, T & t)
{
  LIBXML_TEST_VERSION

  xmlDoc  * doc = xmlReadFile(filename, NULL, 0);
  if (doc == NULL)
  {
    std::cerr << "error: could not parse file: " << filename << std::endl;
      return false;
  }

  deserialize(xmlDocGetRootElement(doc), t, roottag, true, 0, 0);

  xmlFreeDoc(doc);
  xmlCleanupParser();

  return true;
}


#endif // _$(basename)Des_h_
********** [END]






********** [DI] PROLOG
// ------------------------------------------------------------------
// This is the structure deserializer implementation file.
// ------------------------------------------------------------------

#include "$(basename)Com.h"
#include "$(basename)Des.h"
//#include <stdlib.h>
********** [END]


********** [DI] FILE PROLOG
********** [END]


********** [DI] STRUCT PROLOG



void deserialize(xmlNode * node, $(name) & rObject, const char * pszTag, bool fRoot,
  const char * pszIdTag, std::string * pstrIdValue)
{
  std::cerr << "strict prolog $(name): " << (pszIdTag? pszIdTag : "<null>") << ", "
    << pstrIdValue << std::endl;

  if (!pszTag)
    pszTag="$(alias)";
  if (fRoot)
  {
    if (!isElement(node, pszTag))
      return;
  }

  for (; node; node = skipWhitespace(node->next))
  {
    xmlNode * elem = node;
    if (pszIdTag && pstrIdValue && isElement(elem, pszIdTag))
    {
      deserialize(elem, *pstrIdValue, pszIdTag, false);
      continue;
    }
********** [END]


********** [DI] GENERIC DECL
    if (isElement(elem, "$(alias)"))
    {
      deserialize(elem, rObject.$(name), "$(alias)", false);
      continue;
    }
********** [END]


********** [DI] VECTOR DECL
/* TODO
    if (isElement(elem, "$(alias)"))
    {
      deserialize(elem, rObject.%s, "%s", false);\n", mstrName.c_str(), mstrAlias.c_str());
      continue;
    }
*/
********** [END]


********** [DI] SET/LIST DECL
    if (isElement(elem, "$(alias)"))
    {
      deserialize(elem, rObject.$(name), "$(alias)", "$(item)", false);
      continue;
    }
********** [END]


********** [DI] MAP DECL
    if (isElement(elem, "$(alias)"))
    {
      deserialize(elem, rObject.$(name), "$(alias)", "$(item)", "$(id)", false);
      continue;
    }
********** [END]


********** [DI] STRUCT EPILOG
    /* end of struct deserialize function */
  } // for
}
********** [END]


********** [DI] FILE EPILOG
********** [END]


********** [DI] EPILOG



void deserialize(xmlNode * node, std::string & rObject, const char * pszTag, bool fRoot)
{
  if (fRoot)
  {
    if (!isElement(node, pszTag))
      return;
  }

  if (node && node->content)
  {
    rObject = reinterpret_cast<char*>(node->content);
    std::cerr << "content:" << node->content << std::endl;
  }
  else
  {
    rObject.clear();
    std::cerr << "no content:" << std::endl;
  }

  // return node->next == 0;
}



********** [END]
