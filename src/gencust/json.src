***************************************************************************
flexconf - flexible configuration generator
Copyright (c) 2008-2009 Holger Böhnke

This file is part of flexconf.

Flexconf is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
***************************************************************************



********** [GL] PROLOG
/*-------------------------------------------------------------------
  This file is part of the structure de/serializer flexconf.
  It has been automatically created by:

  $(packagename)

  !!! DO NOT MODIFY MANUALLY !!!

  Bugreports to $(bugreport)
  -------------------------------------------------------------------
  flexconf - flexible configuration generator
  Copyright (c) 2008-2009 Holger Böhnke

  This file is part of flexconf.

  Flexconf is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -------------------------------------------------------------------
  As a special exception, you may create a larger work that contains
  part or all of the de/serializer functions and distribute that work
  under terms of your choice, as long as that work itself does not
  provide a functionality similar to flexconf.
  Alternatively, if you modify or redistribute this file itself,
  you may (at your option) remove this special exception, which will
  cause the file to be licensed under the GNU General Public
  License without this special exception.
*/

********** [END]






********** [CH] PROLOG
// ------------------------------------------------------------------
// This is the structure common header file.
// ------------------------------------------------------------------

#ifndef _$(basename)Com_h_
#define _$(basename)Com_h_

#ifdef _MSC_VER
#define _CRT_SECURE_NO_DEPRECATE
#endif

#include <string>
#include <list>
#include <set>
#include <map>

struct SLongHex
{
  SLongHex() { }
  SLongHex(unsigned long ulHex) : mulHex(ulHex) { }

  unsigned long mulHex;

  bool operator == (const SLongHex & cmp) const { return mulHex == cmp.mulHex; }
  bool operator >= (const SLongHex & cmp) const { return mulHex >= cmp.mulHex; }
  bool operator <= (const SLongHex & cmp) const { return mulHex <= cmp.mulHex; }
  bool operator >  (const SLongHex & cmp) const { return mulHex >  cmp.mulHex; }
  bool operator <  (const SLongHex & cmp) const { return mulHex <  cmp.mulHex; }
  bool operator != (const SLongHex & cmp) const { return mulHex != cmp.mulHex; }

  unsigned long operator = (unsigned long ulHex) { return mulHex=ulHex; }
  operator unsigned long () const { return mulHex; }
};

class CWriteJson;
class CReadJson;

********** [END]


********** [CH] FILE PROLOG
#include "$(headerfile)"
********** [END]


********** [CH] STRUCT PROLOG
********** [END]


********** [CH] GENERIC DECL
********** [END]


********** [CH] VECTOR DECL
********** [END]


********** [CH] SET/LIST DECL
********** [END]


********** [CH] MAP DECL
********** [END]


********** [CH] STRUCT EPILOG
********** [END]


********** [CH] FILE EPILOG
********** [END]


********** [CH] EPILOG
#endif // _$(basename)Com_h_
********** [END]






********** [CI] PROLOG
// ------------------------------------------------------------------
// This is the structure common implementation file.
// ------------------------------------------------------------------

#include "$(basename)Com.h"
********** [END]


********** [CI] FILE PROLOG
********** [END]


********** [CI] STRUCT PROLOG
********** [END]


********** [CI] GENERIC DECL
********** [END]


********** [CI] VECTOR DECL
********** [END]


********** [CI] SET/LIST DECL
********** [END]


********** [CI] MAP DECL
********** [END]


********** [CI] STRUCT EPILOG
********** [END]


********** [CI] FILE EPILOG
********** [END]


********** [CI] EPILOG
********** [END]






********** [SH] PROLOG
// ------------------------------------------------------------------
// This is the structure serializer header file.
// ------------------------------------------------------------------

#ifndef _$(basename)Ser_h_
#define _$(basename)Ser_h_

#include <stdio.h>

#ifdef _MSC_VER
#define snprintf _snprintf
#pragma warning(disable: 4786)
#endif


// ------------------------------------------------------------------
// Generic baseclass for writing a json snippet.
// This class must be implemented to write to a specific type of
// output, like file, std:string, buffer etc.
// ------------------------------------------------------------------

const int IDENT_WIDTH = 2;

class CWriteJson
{
public:
  CWriteJson();
  virtual ~CWriteJson();

  // Start Json Object, if tag is null 
  void StartObject(const char * pszTag);
  void EndObject(const char * pszTag);

  void StartArray(const char * pszTag);
  void EndArray(const char * pszTag);

  void StartElement(const char * pszName);
  void EndElement(const char * pszName);

  void PutData(const std::string & data);
  void PutData(const char * pszData, int nDataLen);

private:
  virtual void startCompound(const char * pszTag, char c)     = 0;
  virtual void endCompound(const char * pszTag, char c)       = 0;
  virtual void startElement(const char * pszName)             = 0;
  virtual void endElement(const char * pszName)               = 0;
  virtual void putData(const std::string & data)              = 0;
  virtual void putData(const char * pszData, int nDataLen)    = 0;
};



class CWriteJsonString : public CWriteJson
{
public:
  CWriteJsonString(std::string & strWrite);

private:
  void startCompound(const char * pszTag, char c);
  void endCompound(const char * pszTag, char c);

  void startElement(const char * pszName);
  void endElement(const char * pszName);

  void putData(const std::string & data);
  void putData(const char * pszData, int nDataLen);

  void indent();

  std::string & mstrWrite;
  int           mnDepth;
  bool          mfLf;
  bool          mfNewStruct;
};



********** [END]


********** [SH] FILE PROLOG
********** [END]


********** [SH] STRUCT PROLOG
void serialize(CWriteJson & rWriteJson, const $(name) & rObject, const char * pszTag = 0,
  const char * pszIdTag = 0, const std::string * pstrIdValue = 0);
********** [END]


********** [SH] GENERIC DECL
********** [END]


********** [SH] VECTOR DECL
********** [END]


********** [SH] SET/LIST DECL
********** [END]


********** [SH] MAP DECL
********** [END]


********** [SH] STRUCT EPILOG
********** [END]


********** [SH] FILE EPILOG
********** [END]


********** [SH] EPILOG



inline void serialize(char * pBuffer, int nBufSize, const bool & rObject)
{
  snprintf(pBuffer, nBufSize, rObject? "1" : "0");
}

inline void serialize(char * pBuffer, int nBufSize, const short & rObject)
{
  snprintf(pBuffer, nBufSize, "%hd", rObject);
}

inline void serialize(char * pBuffer, int nBufSize, const unsigned short & rObject)
{
  snprintf(pBuffer, nBufSize, "%hu", rObject);
}

inline void serialize(char * pBuffer, int nBufSize, const int & rObject)
{
  snprintf(pBuffer, nBufSize, "%d", rObject);
}

inline void serialize(char * pBuffer, int nBufSize, const unsigned int & rObject)
{
  snprintf(pBuffer, nBufSize, "%u", rObject);
}

inline void serialize(char * pBuffer, int nBufSize, const long & rObject)
{
  snprintf(pBuffer, nBufSize, "%ld", rObject);
}

inline void serialize(char * pBuffer, int nBufSize, const unsigned long & rObject)
{
  snprintf(pBuffer, nBufSize, "%lu", rObject);
}

inline void serialize(char * pBuffer, int nBufSize, const float & rObject)
{
  snprintf(pBuffer, nBufSize, "%f", static_cast<double>(rObject));
}

inline void serialize(char * pBuffer, int nBufSize, const double & rObject)
{
  snprintf(pBuffer, nBufSize, "%f", rObject);
}

inline void serialize(char * pBuffer, int nBufSize, const SLongHex & rObject)
{
  snprintf(pBuffer, nBufSize, "%lX", rObject.mulHex);
}



// serialize a std::string object
void serialize(CWriteJson & rWriteJson, const std::string & rObject, const char * pszTag);

// serialize any of the objects for that an above function is defined
template <class _T>
void serialize(CWriteJson & rWriteJson, const _T & rObject, const char * pszTag)
{
  rWriteJson.StartElement(pszTag);

  char szBuffer[80];
  serialize(szBuffer, 80, rObject);
  rWriteJson.PutData(szBuffer);

  rWriteJson.EndElement(pszTag);
}



// serialize any set object for witch a key serialize function exists
template <class _K>
void serialize(
  CWriteJson & rWriteJson, const std::set<_K> & rObject,
  const char * pszTag, const char * pszTagItem)
{
  rWriteJson.StartObject(pszTag);
  for (typename std::set<_K>::const_iterator itr=rObject.begin(); itr!=rObject.end(); itr++)
  {
    // serialize the key object
    serialize(rWriteJson, *itr, pszTagItem);
  }
  rWriteJson.EndObject(pszTag);
}



// serialize any list object for witch a serialize function exists
template <class _T>
void serialize(
  CWriteJson & rWriteJson, const std::list<_T> & rObject,
  const char * pszTag, const char * pszTagItem)
{
  rWriteJson.StartArray(pszTag);
  for (typename std::list<_T>::const_iterator itr=rObject.begin(); itr!=rObject.end(); itr++)
  {
    // serialize the key object
    serialize(rWriteJson, *itr, 0 /*pszTagItem*/);
  }
  rWriteJson.EndArray(pszTag);
}



// serialize a std::map<std::string, _T> object
template <class _T>
void serialize(
  CWriteJson & rWriteJson, const std::map<std::string, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId)
{
  rWriteJson.StartObject(pszTag);
  for (typename std::map<std::string, _T>::const_iterator itr=rObject.begin(); itr!=rObject.end(); itr++)
  {
    serialize(rWriteJson, itr->second, pszTagItem, pszTagId, &itr->first);
  }
  rWriteJson.EndObject(pszTag);
}



// serialize any other map object for witch a key serialize function exists
template <class _K, class _T>
void serialize(
  CWriteJson & rWriteJson, const std::map<_K, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId)
{
  rWriteJson.StartObject(pszTag);
  for (typename std::map<_K, _T>::const_iterator itr=rObject.begin(); itr!=rObject.end(); itr++)
  {
    // first serialize the key to a string
    const int BUFSIZE = 1024;
    char szBuffer[BUFSIZE];
    serialize(szBuffer, BUFSIZE, itr->first);
    std::string strBuffer(szBuffer);
    // serialize the object with a string key
    serialize(rWriteJson, itr->second, pszTagItem, pszTagId, &strBuffer);
  }
  rWriteJson.EndObject(pszTag);
}



// serialize a std::multimap<std::string, _T> object
template <class _T>
void serialize(
  CWriteJson & rWriteJson, const std::multimap<std::string, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId)
{
  rWriteJson.StartObject(pszTag);
  for (typename std::multimap<std::string, _T>::const_iterator itr=rObject.begin(); itr!=rObject.end(); itr++)
  {
    serialize(rWriteJson, itr->second, pszTagItem, pszTagId, &itr->first);
  }
  rWriteJson.EndObject(pszTag);
}



// serialize any other multimap object for witch a key serialize function exists
template <class _K, class _T>
void serialize(
  CWriteJson & rWriteJson, const std::multimap<_K, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId)
{
  rWriteJson.StartObject(pszTag);
  for (typename std::multimap<_K, _T>::const_iterator itr=rObject.begin(); itr!=rObject.end(); itr++)
  {
    // first serialize the key to a string
    const int BUFSIZE = 1024;
    char szBuffer[BUFSIZE];
    serialize(szBuffer, BUFSIZE, itr->first);
    std::string strBuffer(szBuffer);
    // serialize the object with a string key
    serialize(rWriteJson, itr->second, pszTagItem, pszTagId, &strBuffer);
  }
  rWriteJson.EndObject(pszTag);
}


#endif // _$(basename)Ser_h_
********** [END]






********** [SI] PROLOG
// ------------------------------------------------------------------
// This is the structure serializer implementation file.
// ------------------------------------------------------------------

#include "$(basename)Com.h"
#include "$(basename)Ser.h"



CWriteJson::CWriteJson()
{
}

CWriteJson::~CWriteJson()
{
}

void CWriteJson::StartObject(const char * pszTag)
{
  startCompound(pszTag, '{');
}

void CWriteJson::EndObject(const char * pszTag)
{
  endCompound(pszTag, '}');
}

void CWriteJson::StartArray(const char * pszTag)
{
  startCompound(pszTag, '[');
}

void CWriteJson::EndArray(const char * pszTag)
{
  endCompound(pszTag, ']');
}

void CWriteJson::StartElement(const char * pszName)
{
  startElement(pszName);
}

void CWriteJson::EndElement(const char * pszName)
{
  endElement(pszName);
}

void CWriteJson::PutData(const std::string & data)
{
  putData(data);
}

void CWriteJson::PutData(const char * pszData, int nDataLen = 0x7FFF)
{
  putData(pszData, nDataLen);
}



CWriteJsonString::CWriteJsonString(std::string & strWrite)
  :
  mstrWrite(strWrite),
  mnDepth(0),
  mfLf(false),
  mfNewStruct(true)
{
}

void CWriteJsonString::startCompound(const char * pszTag, char c)
{
  if (!mfNewStruct)
  {
    mstrWrite += ",\n";
    mfLf = true;
  }
  else
  {
    mfNewStruct = false;
  }

  indent();

  if (pszTag)
  {
    mstrWrite += '"';
    mstrWrite += pszTag;
    mstrWrite += "\" : ";
  }

  mstrWrite += c;
  mstrWrite += '\n';
  mfLf = true;
  mnDepth++;
  mfNewStruct = true;
}

void CWriteJsonString::endCompound(const char * pszTag, char c)
{
  if (!mfNewStruct)
  {
    mstrWrite += "\n";
    mfLf = true;
  }
  else
  {
    mfNewStruct = false;
  }

  mnDepth--;
  indent();
  mstrWrite += c;
  mfLf = true;
}

void CWriteJsonString::startElement(const char * pszName)
{
  if (!mfNewStruct)
  {
    mstrWrite += ",\n";
    mfLf = true;
  }
  else
  {
    mfNewStruct = false;
  }

  indent();

  if (pszName)
  {
    mstrWrite += '"';
    mstrWrite += pszName;
    mstrWrite += "\" : ";
  }
}

void CWriteJsonString::endElement(const char * pszName)
{
/*
  indent();
  mstrWrite += ",\n";
  mfLf = true;
*/
}

void CWriteJsonString::putData(const std::string & data)
{
  mstrWrite += '"';
  putData(data.data(), data.length());
  mstrWrite += '"';
}

void CWriteJsonString::putData(const char * pszData, int nDataLen)
{
  const char *  pszPos  = pszData;

  while (*pszPos && pszPos-pszData < nDataLen)
  {
    if ('"' == *pszPos)
    {
      mstrWrite += "\\\"";
      pszPos++;
      continue;
    }

    if ('\\' == *pszPos)
    {
      mstrWrite += "\\\\";
      pszPos++;
      continue;
    }

    const char *  pszEnd  = pszPos;

    // find end or entity
    while ( pszEnd-pszData < nDataLen   &&
            0   != *pszEnd      &&
            '\"' != *pszEnd     &&
            '\\' != *pszEnd)
    {
      pszEnd++;
    }

    mstrWrite.append(pszPos, pszEnd-pszPos);
    pszPos = pszEnd;
  }
}

void CWriteJsonString::indent()
{
  if (mfLf)
  {
    mstrWrite.append(mnDepth*IDENT_WIDTH, ' ');
    mfLf = false;
  }
}
********** [END]


********** [SI] FILE PROLOG
********** [END]


********** [SI] STRUCT PROLOG



void serialize(CWriteJson & rWriteJson, const $(name) & rObject, const char * pszTag,
  const char * pszIdTag, const std::string * pstrIdValue)
{
  rWriteJson.StartObject(pszTag);
  if (pszIdTag && pstrIdValue)
  {
    serialize(rWriteJson, *pstrIdValue, pszIdTag);
  }
********** [END]


********** [SI] GENERIC DECL
  serialize(rWriteJson, rObject.$(name), "$(alias)");
********** [END]


********** [SI] VECTOR DECL
/* TODO
  {for (int n=0; n<$(size); n++)
  {
    serialize(rWriteJson, rObject.$(name)[n], "$(alias)");
  }}
*/
********** [END]


********** [SI] SET/LIST DECL
  serialize(rWriteJson, rObject.$(name), "$(alias)", "$(item)");
********** [END]


********** [SI] MAP DECL
  serialize(rWriteJson, rObject.$(name), "$(alias)", "$(item)", "$(id)");
********** [END]


********** [SI] STRUCT EPILOG
  /* end of struct serialize function */
  rWriteJson.EndObject(pszTag);
}
********** [END]


********** [SI] FILE EPILOG
********** [END]


********** [SI] EPILOG



void serialize(CWriteJson & rWriteJson, const std::string & rObject, const char * pszTag)
{
  rWriteJson.StartElement(pszTag);
  rWriteJson.PutData(rObject);
  rWriteJson.EndElement(pszTag);
}
********** [END]






********** [DH] PROLOG
// ------------------------------------------------------------------
// This is the structure deserializer header file.
// ------------------------------------------------------------------

#ifndef _$(basename)Des_h_
#define _$(basename)Des_h_

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

********** [END]


********** [DH] FILE PROLOG
********** [END]


********** [DH] STRUCT PROLOG
void deserialize(CReadXml & rReadXml, $(name) & rObject, const char * pszTag =0, bool fRoot = true,
  const char * pszIdTag = 0, std::string * pstrIdValue = 0);
********** [END]


********** [DH] GENERIC DECL
********** [END]


********** [DH] VECTOR DECL
********** [END]


********** [DH] SET/LIST DECL
********** [END]


********** [DH] MAP DECL
********** [END]


********** [DH] STRUCT EPILOG
********** [END]


********** [DH] FILE EPILOG
********** [END]


********** [DH] EPILOG



class CReadXml
{
public:
  CReadXml()
  {
  }

  virtual ~CReadXml()
  {
  }

  bool IsEof()
  {
    return isEof();
  }

  bool IsStartTag(const char * pszTag, bool fRoot)
  {
    return isStartTag(pszTag, fRoot);
  }

  bool IsEndTag(const char * pszTag)
  {
    return isEndTag(pszTag);
  }

  bool GetData(const char * & pszData, int & nDataLen)
  {
    return getData(pszData, nDataLen);
  }

  void SkipTag()
  {
    skipTag();
  }

private:
  virtual bool isEof()                                            = 0;
  virtual bool isStartTag(const char * pszTag, bool fRoot)        = 0;
  virtual bool isEndTag(const char * pszTag)                      = 0;
  virtual bool getData(const char * & pszData, int & nDataLen)    = 0;
  virtual void skipTag()                                          = 0;
};



class CReadXmlPChar : public CReadXml
{
public:
  CReadXmlPChar(const char * pszXml) :
    mpszXml(pszXml)
  {
  }

  bool isEof()
  {
    return !*mpszXml;
  }

  bool isStartTag(const char * pszTag, bool fRoot)
  {
    if (fRoot)
    {
      // <?xml version="1.0" encoding="UTF-8" ?>
      if (0!=strncmp(mpszXml, "<?xml ", 6))
        return false;
      mpszXml += 6;
      while ( *mpszXml && '?' != *mpszXml++);
      if ( '>' != *mpszXml++)
        return false;

      // <!DOCTYPE ...
      eatws();
      if (0==strncmp(mpszXml, "<!DOCTYPE ", 10))
      {
        mpszXml += 10;
        while ( *mpszXml && '>' != *mpszXml++);
      }
    }

    eatws();

    int nTagLen = strlen(pszTag);

    if ('<' != mpszXml[0]                           ||
        0   != strncmp(mpszXml+1, pszTag, nTagLen)  ||
        '>' != mpszXml[nTagLen+1] )
    {
      return false;
    }
    mpszXml += nTagLen+2;
    return true;
  }

  bool isEndTag(const char * pszTag)
  {
    eatws();

    int nTagLen = strlen(pszTag);

    if ('<' != mpszXml[0]                           ||
        '/' != mpszXml[1]                           ||
        0   != strncmp(mpszXml+2, pszTag, nTagLen)  ||
        '>' != mpszXml[nTagLen+2] )
    {
      return false;
    }
    mpszXml += nTagLen+3;
    return true;
  }

  bool getData(const char * & pszData, int & nDataLen)
  {
    if ('&' == *mpszXml)
    {
      // skip ampersand
      mpszXml++;

      if (0==strncmp(mpszXml, "gt;", 3))
      {
        pszData =   ">";
        mpszXml +=  3;
      }
      else if (0==strncmp(mpszXml, "lt;", 3))
      {
        pszData =   "<";
        mpszXml +=  3;
      }
      else if (0==strncmp(mpszXml, "amp;", 4))
      {
        pszData =   "&";
        mpszXml +=  4;
      }
      else if (0==strncmp(mpszXml, "quot;", 5))
      {
        pszData =   "\"";
        mpszXml +=  5;
      }
      else if (0==strncmp(mpszXml, "apos;", 5))
      {
        pszData =   "'";
        mpszXml +=  5;
      }
      else
      {
        // no known xml entity, use as plain text
        pszData =   "&";
      }
      nDataLen = 1;

      // finished, when new tag starts or string is at the end
      return  0   == *mpszXml     ||
              '<' == *mpszXml;
    }

    const char * pszNext = mpszXml;
    // find next delimiter
    while ( 0   != *pszNext &&
            '<' != *pszNext &&
            '&' != *pszNext )
    {
      pszNext++;
    }

    pszData   = mpszXml;
    nDataLen  = pszNext - mpszXml;
    mpszXml   = pszNext;

    return '&' != *pszNext;
  }

  void skipTag()
  {
    // not eof then skip over the '<', if we are on one else skip non '<'
    // skip over the '<'
    if (*mpszXml)
      mpszXml++;

    // find next start or end tag
    while (  0 != *mpszXml   &&   '<' != *mpszXml  )
    {
      mpszXml++;
    }
  }

  void eatws()
  {
    while ( 0 != *mpszXml &&
            (
              ' '   == *mpszXml ||
              '\t'  == *mpszXml ||
              '\n'  == *mpszXml ||
              '\r'  == *mpszXml
            )
          )
    {
      mpszXml++;
    }
  }
protected:
  void setXml(const char * pszXml)
  {
    mpszXml = pszXml;
  }

private:
  const char * mpszXml;
};



class CReadXmlFile : public CReadXmlPChar
{
public:
  CReadXmlFile() :
    CReadXmlPChar(0)
  {
  }

  bool UseFile(const char * pszFilename)
  {
    setXml(0);
    mstrData.erase();

    FILE * f = fopen(pszFilename, "r");
    if (!f)
    {
      return false;
    }

    while (!feof(f))
    {
      const int BUFSIZE = 4096;
      char szBuffer[BUFSIZE];
      int nRead = fread(szBuffer, 1, BUFSIZE, f);
      mstrData.append(szBuffer, nRead);
    }

    fclose(f);
    setXml(mstrData.c_str());
    return true;
  }

  const std::string & GetData() { return mstrData; }

private:
  std::string mstrData;
};



inline void deserialize(const char * pBuffer, bool & rObject)
{
  rObject =
    0==strncmp(pBuffer, "true", 4) ||
    0==strncmp(pBuffer, "yes", 3) ||
    0==strncmp(pBuffer, "on", 2) ||
    0==strncmp(pBuffer, "1", 1);
}

inline void deserialize(const char * pBuffer, short & rObject)
{
  rObject = static_cast<short>(strtol(pBuffer, 0, 10));
}

inline void deserialize(const char * pBuffer, unsigned short & rObject)
{
  rObject = static_cast<unsigned short>(strtoul(pBuffer, 0, 10));
}

inline void deserialize(const char * pBuffer, int & rObject)
{
  rObject = static_cast<int>(strtol(pBuffer, 0, 10));
}

inline void deserialize(const char * pBuffer, unsigned int & rObject)
{
  rObject = static_cast<unsigned int>(strtoul(pBuffer, 0, 10));
}

inline void deserialize(const char * pBuffer, long & rObject)
{
  rObject = strtol(pBuffer, 0, 10);
}

inline void deserialize(const char * pBuffer, unsigned long & rObject)
{
  rObject = strtoul(pBuffer, 0, 10);
}

inline void deserialize(const char * pBuffer, float & rObject)
{
  rObject = static_cast<float>(atof(pBuffer));
}

inline void deserialize(const char * pBuffer, double & rObject)
{
  rObject = atof(pBuffer);
}

inline void deserialize(const char * pBuffer, SLongHex & rObject)
{
  rObject.mulHex = strtoul(pBuffer, 0, 16);
}



void deserialize(CReadXml & rReadXml, std::string & rObject, const char * pszTag, bool fRoot = true);

// deserialize types without a base or ordinal integers in decimal system
template <class _T>
void deserialize(CReadXml & rReadXml, _T & rObject, const char * pszTag, bool fRoot = true)
{
  if (fRoot)
  {
    if (!rReadXml.IsStartTag(pszTag, fRoot))
      return;
  }
  const char *  pszText   = 0;
  int           nLen      = 0;
  rReadXml.GetData(pszText, nLen);
  deserialize(pszText, rObject);
  if (!rReadXml.IsEndTag(pszTag))
    return;
}



template <class _K>
void deserialize(
  CReadXml & rReadXml, std::set<_K> & rObject,
  const char * pszTag, const char * pszTagItem, bool fRoot = true)
{
  if (fRoot)
  {
    if (!rReadXml.IsStartTag(pszTag, fRoot))
      return;
  }
  while (!rReadXml.IsEof() && !rReadXml.IsEndTag(pszTag))
  {
    if (rReadXml.IsStartTag(pszTagItem, false))
    {
      _K _k;
      deserialize(rReadXml, _k, pszTagItem, false);
      rObject.insert(_k);
      continue;
    }
    rReadXml.SkipTag();
  } // while (!rReadXml.IsEndTag(...))
}



template <class _T>
void deserialize(
  CReadXml & rReadXml, std::list<_T> & rObject,
  const char * pszTag, const char * pszTagItem, bool fRoot = true)
{
  if (fRoot)
  {
    if (!rReadXml.IsStartTag(pszTag, fRoot))
      return;
  }
  while (!rReadXml.IsEof() && !rReadXml.IsEndTag(pszTag))
  {
    if (rReadXml.IsStartTag(pszTagItem, false))
    {
      _T _t;
      deserialize(rReadXml, _t, pszTagItem, false);
      rObject.push_back(_t);
      continue;
    }
    rReadXml.SkipTag();
  } // while (!rReadXml.IsEndTag(...))
}



template <class _T>
void deserialize(
  CReadXml & rReadXml, std::map<std::string, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId,
  bool fRoot = true)
{
  if (fRoot)
  {
    if (!rReadXml.IsStartTag(pszTag, fRoot))
      return;
  }
  while (!rReadXml.IsEof() && !rReadXml.IsEndTag(pszTag))
  {
    if (rReadXml.IsStartTag(pszTagItem, false))
    {
      std::string strKey;
      _T _t;
      deserialize(rReadXml, _t, pszTagItem, false, pszTagId, &strKey);
#if 0 // this should suffice, but to be on the safe side we use the old method
      rObject[strKey] = _t;
#else
      typename std::map<std::string, _T>::iterator fnd = rObject.find(strKey);
      if (fnd != rObject.end())
      {
        rObject.erase(fnd);
      }
      rObject.insert(std::pair<std::string, _T>(strKey, _t));
#endif
      continue;
    }
    rReadXml.SkipTag();
  } // while (!rReadXml.IsEndTag(...))
}



template <class _K, class _T>
void deserialize(
  CReadXml & rReadXml, std::map<_K, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId,
  bool fRoot = true)
{
  if (fRoot)
  {
    if (!rReadXml.IsStartTag(pszTag, fRoot))
      return;
  }
  while (!rReadXml.IsEof() && !rReadXml.IsEndTag(pszTag))
  {
    if (rReadXml.IsStartTag(pszTagItem, false))
    {
      std::string strKey;
      _T _t;
      deserialize(rReadXml, _t, pszTagItem, false, pszTagId, &strKey);
      _K _k;
      deserialize(strKey.c_str(), _k);
#if 0 // this should suffice, but to be on the safe side we use the old method
      rObject[_k] = _t;
#else
      typename std::map<_K, _T>::iterator fnd = rObject.find(_k);
      if (fnd != rObject.end())
      {
        rObject.erase(fnd);
      }
      rObject.insert(std::pair<_K, _T>(_k, _t));
#endif
      continue;
    }
    rReadXml.SkipTag();
  } // while (!rReadXml.IsEndTag(...))
}



template <class _T>
void deserialize(
  CReadXml & rReadXml, std::multimap<std::string, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId,
  bool fRoot = true)
{
  if (fRoot)
  {
    if (!rReadXml.IsStartTag(pszTag, fRoot))
      return;
  }
  while (!rReadXml.IsEof() && !rReadXml.IsEndTag(pszTag))
  {
    if (rReadXml.IsStartTag(pszTagItem, false))
    {
      std::string strKey;
      _T _t;
      deserialize(rReadXml, _t, pszTagItem, false, pszTagId, &strKey);
      rObject.insert(std::pair<std::string, _T>(strKey, _t));
      continue;
    }
    rReadXml.SkipTag();
  } // while (!rReadXml.IsEndTag(...))
}



template <class _K, class _T>
void deserialize(
  CReadXml & rReadXml, std::multimap<_K, _T> & rObject,
  const char * pszTag, const char * pszTagItem, const char * pszTagId,
  bool fRoot = true)
{
  if (fRoot)
  {
    if (!rReadXml.IsStartTag(pszTag, fRoot))
      return;
  }
  while (!rReadXml.IsEof() && !rReadXml.IsEndTag(pszTag))
  {
    if (rReadXml.IsStartTag(pszTagItem, false))
    {
      std::string strKey;
      _T _t;
      deserialize(rReadXml, _t, pszTagItem, false, pszTagId, &strKey);
      _K _k;
      deserialize(strKey.c_str(), _k);
      rObject.insert(std::pair<_K, _T>(_k, _t));
      continue;
    }
    rReadXml.SkipTag();
  } // while (!rReadXml.IsEndTag(...))
}


#endif // _$(basename)Des_h_
********** [END]






********** [DI] PROLOG
// ------------------------------------------------------------------
// This is the structure deserializer implementation file.
// ------------------------------------------------------------------

#include "$(basename)Com.h"
#include "$(basename)Des.h"
//#include <stdlib.h>
********** [END]


********** [DI] FILE PROLOG
********** [END]


********** [DI] STRUCT PROLOG



void deserialize(CReadXml & rReadXml, $(name) & rObject, const char * pszTag, bool fRoot,
  const char * pszIdTag, std::string * pstrIdValue)
{
  if (!pszTag)
    pszTag="$(alias)";
  if (fRoot)
  {
    if (!rReadXml.IsStartTag(pszTag, fRoot))
      return;
  }
  while (!rReadXml.IsEof() && !rReadXml.IsEndTag(pszTag))
  {
    if (pszIdTag && pstrIdValue && rReadXml.IsStartTag(pszIdTag, false))
    {
      deserialize(rReadXml, *pstrIdValue, pszIdTag, false);
      continue;
    }
********** [END]


********** [DI] GENERIC DECL
    if (rReadXml.IsStartTag("$(alias)", false))
    {
      deserialize(rReadXml, rObject.$(name), "$(alias)", false);
      continue;
    }
********** [END]


********** [DI] VECTOR DECL
/* TODO
    if (rReadXml.IsStartTag("%s", false))\n", mstrAlias.c_str());
    {
      deserialize(rReadXml, rObject.%s, "%s", false);\n", mstrName.c_str(), mstrAlias.c_str());
      continue;
    }
*/
********** [END]


********** [DI] SET/LIST DECL
    if (rReadXml.IsStartTag("$(alias)", false))
    {
      deserialize(rReadXml, rObject.$(name), "$(alias)", "$(item)", false);
      continue;
    }
********** [END]


********** [DI] MAP DECL
    if (rReadXml.IsStartTag("$(alias)", false))
    {
      deserialize(rReadXml, rObject.$(name), "$(alias)", "$(item)", "$(id)", false);
      continue;
    }
********** [END]


********** [DI] STRUCT EPILOG
    /* end of struct deserialize function */
    rReadXml.SkipTag();
  } // while (!rReadXml.IsEndTag(...))
}
********** [END]


********** [DI] FILE EPILOG
********** [END]


********** [DI] EPILOG



void deserialize(CReadXml & rReadXml, std::string & rObject, const char * pszTag, bool fRoot)
{
  if (fRoot)
  {
    if (!rReadXml.IsStartTag(pszTag, fRoot))
      return;
  }

  const char *  pszText   = 0;
  int           nLen      = 0;
  bool          fMore     = false;

  rObject.erase();
  do
  {
    fMore = !rReadXml.GetData(pszText, nLen);
    rObject.append(pszText, nLen);
  } while (fMore);

  if (!rReadXml.IsEndTag(pszTag))
    return;
}
********** [END]
